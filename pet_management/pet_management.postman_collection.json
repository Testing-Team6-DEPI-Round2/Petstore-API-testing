{
	"info": {
		"_postman_id": "a8859514-954f-4f44-92c6-01d5cdd2c956",
		"name": "pet_management",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42327805"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "{petId}",
					"item": [
						{
							"name": "uploadImage",
							"item": [
								{
									"name": "uploads an image",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Test Case: ${pm.environment.get(\"testCase\")} - Validate Status Code', function () {\r",
													"    pm.response.to.have.status(Number(pm.environment.get(\"expectedStatus\")));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"var currentTestCase = pm.iterationData.toObject();\r",
													"\r",
													"pm.environment.set(\"id\", currentTestCase.id);\r",
													"pm.environment.set(\"expectedStatus\", currentTestCase.expectedStatus);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "scope",
													"value": "read:pets write:pets",
													"type": "string"
												},
												{
													"key": "authUrl",
													"value": "https://petstore.swagger.io/oauth/authorize",
													"type": "string"
												},
												{
													"key": "grant_type",
													"value": "implicit",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "additionalMetadata",
													"value": "<string>",
													"description": "Additional data to pass to server",
													"type": "text"
												},
												{
													"key": "file",
													"description": "file to upload",
													"type": "file",
													"src": "/C:/Users/phi/Desktop/cover.png"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/:petId/uploadImage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId",
												"uploadImage"
											],
											"variable": [
												{
													"key": "petId",
													"value": "{{id}}",
													"description": "(Required) ID of pet to update"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Find pet by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var currentTestCase = pm.iterationData.toObject();\r",
											"\r",
											"pm.environment.set(\"id\", currentTestCase.id);\r",
											"pm.environment.set(\"expectedStatus\", currentTestCase.expectedStatus);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Test Case: ${pm.environment.get(\"testCase\")} - Validate Status Code', function () {\r",
											"    pm.response.to.have.status(Number(pm.environment.get(\"expectedStatus\")));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "{{id}}",
											"description": "(Required) ID of pet to return"
										}
									]
								},
								"description": "Returns a single pet"
							},
							"response": []
						}
					]
				},
				{
					"name": "findByStatus",
					"item": [
						{
							"name": "Finds Pets by status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var currentTestCase = pm.iterationData.toObject();\r",
											"\r",
											"pm.environment.set(\"status\", currentTestCase.status);\r",
											"pm.environment.set(\"expectedStatus\", currentTestCase.expectedStatus);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Test Case: ${pm.environment.get(\"testCase\")} - Validate Status Code', function () {\r",
											"    pm.response.to.have.status(Number(pm.environment.get(\"expectedStatus\")));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "read:pets write:pets",
											"type": "string"
										},
										{
											"key": "authUrl",
											"value": "https://petstore.swagger.io/oauth/authorize",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "implicit",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status={{status}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "{{status}}",
											"description": "(Required) Status values that need to be considered for filter"
										}
									]
								},
								"description": "Multiple status values can be provided with comma separated strings"
							},
							"response": []
						}
					]
				},
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains pet ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Pet name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"doggie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is available\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"available\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"var currentTestCase = pm.iterationData.toObject();\r",
									"\r",
									"pm.environment.set(\"testCase\", currentTestCase.testCase);\r",
									"pm.environment.set(\"name\", currentTestCase.name);\r",
									"pm.environment.set(\"status\", currentTestCase.status);\r",
									"pm.environment.set(\"id\", currentTestCase.id);\r",
									"\r",
									"console.log('Running Test Case: ' + currentTestCase.testCase);\r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"{{name}}\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"{{status}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var currentTestCase = pm.iterationData.toObject();\r",
									"\r",
									"pm.environment.set(\"testCase\", currentTestCase.testCase);\r",
									"pm.environment.set(\"name\", currentTestCase.name);\r",
									"pm.environment.set(\"status\", currentTestCase.status);\r",
									"pm.environment.set(\"id\", currentTestCase.id);\r",
									"pm.environment.set(\"photo_URL\", currentTestCase.photo_URL);\r",
									"pm.environment.set(\"category_name\", currentTestCase.category_name);\r",
									"pm.environment.set(\"expectedStatus\", currentTestCase.expectedStatus);\r",
									"\r",
									"console.log('Running Test Case: ' + currentTestCase.testCase);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Test Case: ${pm.environment.get(\"testCase\")} - Validate Status Code', function () {\r",
									"    pm.response.to.have.status(Number(pm.environment.get(\"expectedStatus\")));\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Response contains pet ID\", function () {\r",
									"        pm.expect(jsonData).to.have.property(\"id\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Pet name is correct\", function () {\r",
									"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Status is correct\", function () {\r",
									"        pm.expect(jsonData.status).to.eql(pm.environment.get(\"status\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"console.log(`Test Case ${pm.environment.get(\"testCase\")} completed successfully.`);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"{{category_name}}\"\n  },\n  \"name\": \"{{name}}\",\n  \"photoUrls\": [\n    \"{{photo_URL}}\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"{{status}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2"
		}
	]
}